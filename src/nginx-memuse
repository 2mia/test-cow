#!/usr/bin/env python
import psutil
import struct
import os
import sys

PAGESIZE = 4096

# from https://gist.github.com/Eugeny/04ccfe8accf4bc74b0ca
class Map(object):
    pass


def get_pages(pid):
    maps = []
    for l in open('/proc/%i/maps' % pid):
        tokens = l.split()
        m = Map()
        m.mfrom = int(tokens[0].split('-')[0], 16)
        m.mto = int(tokens[0].split('-')[1], 16)
        maps.append(m)

    pfns = set()

    f = open('/proc/%i/pagemap' % pid, 'rb')
    for map in maps:
        f.seek(8 * map.mfrom / PAGESIZE )
        abytes = f.read(8 * ( map.mto/ PAGESIZE - map.mfrom / PAGESIZE + 1))
        idx = 0
        for vpage in range(map.mfrom / PAGESIZE, map.mto / PAGESIZE + 1):
            bytes = abytes[idx:idx+8]
            idx += 8
            if bytes:
                page = struct.unpack('<Q', bytes)[0]
                pfn = page & 0x7FFFFFFFFFFFFF

                swapped = bool(page & (2 ** 62))
                present = bool(page & (2 ** 63))

                pfns.add(pfn)
    return pfns

try:
    pid = int(sys.argv[1])
except:
    pid = os.popen("ps -ef | grep master | grep nginx | grep -v grep | tr -s ' ' | cut -d ' ' -f2").read()
    if not pid:
        print 'Usage: memuse.py <pid>'
        sys.exit(1)
    else:
        print "Found nginx master: "+pid
        pid = int(pid)


whole = set()

def scan(pid, level=0):
    p = psutil.Process(pid)
    pfns = get_pages(p.pid)
    old_frames = len(whole)
    for pfn in pfns:
        whole.add(pfn)
    new_frames = len(whole)
    print '%s - %5i %s (%-030s):  %8i  +%-8i +%-6iMB %10i KB' % (
        ' ' * level,
        p.pid,
        ' ' * (10 - level),
        ' '.join(p.cmdline())[:30],
        len(pfns),
        (new_frames - old_frames),
        (new_frames - old_frames)*PAGESIZE/1024/1024,
        len(pfns) * PAGESIZE / 1024
    )
    for c in p.children():
        scan(c.pid, level=level+1)

print 'PID                 Commandline                          Frames (+unique)  +added          VMEM'
scan(pid)
print '----------------------------------------------------------------------------------------'
print 'TOTAL:                                                         %8i    +%-6iMB' % (
    len(whole),
    len(whole) * PAGESIZE / 1024 / 1024
)
